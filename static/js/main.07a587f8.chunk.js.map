{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","APIkey","baseUri","useState","useLocation","setLocation","useIcon","setIcon","usecity","setCity","celsious","setCelsious","fahrenheit","setFahrenheit","toggle","setToggle","a","console","log","Axios","get","timeout","then","res","data","catch","_e","weather","icon","name","main","temp","toFixed","_fah","useEffect","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","longitude","alert","className","src","alt","disabled","onClick","e","getWeather","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PAuFeA,MAnFf,WAEE,IAAMC,EAAS,mCACTC,EAAU,mDAHH,EAOsBC,mBAAS,MAP/B,mBAONC,EAPM,KAOOC,EAPP,OAScF,mBAAS,MATvB,mBASNG,EATM,KASGC,EATH,OAUcJ,mBAAS,WAVvB,mBAUNK,EAVM,KAUGC,EAVH,OAYmBN,mBAAS,GAZ5B,mBAYNO,EAZM,KAYIC,EAZJ,OAauBR,mBAAS,GAbhC,mBAaNS,EAbM,KAaMC,EAbN,OAeeV,oBAAS,GAfxB,mBAeNW,EAfM,KAeEC,EAfF,iDAuCb,sBAAAC,EAAA,sEAEIC,QAAQC,IAAI,YAAcd,GAF9B,SAGUe,IAAMC,IAAIhB,EAAa,CAC3BiB,QAAS,OAERC,MAAK,SAACC,GAAD,OAASA,EAAIC,QAClBC,OAAM,SAACC,GAAD,OAAQT,QAAQC,IAAI,WAAad,EAAa,iBACpDkB,MAAK,SAACE,GACLP,QAAQC,IAAIM,GAEZjB,EAAQiB,EAAKG,QAAQ,GAAGC,MAExBnB,EAAQe,EAAKK,MAEblB,GAAaa,EAAKM,KAAKC,KAAO,QAAQC,QAAQ,GAAK,MACnD,IAAIC,EAAyB,EAAjBT,EAAKM,KAAKC,KAAW,EAAK,OACtClB,EAAcoB,EAAKD,QAAQ,GAAK,SAjBxC,cAoBIf,QAAQC,IAAI,WAAad,EAAa,gBApB1C,mBAqBW,GArBX,uCAuBIa,QAAQC,IAAI,WAAad,EAAa,cAvB1C,mBAyBW,GAzBX,0DAvCa,sBAoEb,OAlDA8B,qBAAU,WAKJC,UAAUC,YACZD,UAAUC,YAAYC,oBAAmB,SAACC,GACxC,IAAIC,EAAMD,EAASE,OAAOC,SACtBC,EAAMJ,EAASE,OAAOG,UAC1BtC,EAAY,GAAD,OAAIH,EAAJ,eAAkBqC,EAAlB,gBAA6BG,EAA7B,kBAA0CzC,OAGvD2C,MAAM,mDAVP,CAAC9B,EAAQV,IAiDV,mCACE,sBAAKyC,UAAU,UAAf,UACGvC,EAAU,qBAAKwC,IAAG,2CAAsCxC,EAAtC,QAAqDyC,IAAI,YAAe,6BAE3F,6BAAKvC,IACL,gCAAQM,EAASJ,EAAWE,IAJ9B,IAIkD,uBAChD,wBAAQoC,UAAU5C,EAA4B6C,QAAS,SAACC,GAAD,OA3EhD,0CA2EuDC,CAAWD,IAAzE,yBALF,IAKoG,uBAClG,wBAAQF,UAAU5C,EAA4B6C,QAAS,SAACC,GAAD,OAAOnC,GAAWD,IAAzE,qCCpEOsC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.07a587f8.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Axios from \"axios\";\nimport './style.css';\n\nfunction App() {\n\n  const APIkey = '6094bad2b39d0c18494fb1fe6179385f';\n  const baseUri = 'https://api.openweathermap.org/data/2.5/weather?'\n  //const url = `https://api.openweathermap.org/data/2.5/weather?q=California&appid=${APIkey}`;\n\n\n  const [useLocation, setLocation] = useState(null);\n\n  const [useIcon, setIcon] = useState(null);\n  const [usecity, setCity] = useState('Weather');\n\n  const [celsious, setCelsious] = useState(0);\n  const [fahrenheit, setFahrenheit] = useState(0);\n\n  const [toggle, setToggle] = useState(false);\n\n\n  useEffect(() => {\n    getCurrentlocation()\n  }, [toggle, useLocation])\n\n  function getCurrentlocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        let lat = position.coords.latitude;\n        let lon = position.coords.longitude;\n        setLocation(`${baseUri}lat=${lat}&lon=${lon}&appid=${APIkey}`);\n      });\n    } else {\n      alert(\"Geolocation is not supported by this browser.\");\n    }\n  }\n\n  /**\n   * Function to test the url\n   * @param {string} url URL to test\n   * @returns {boolean} True if server alive and false if dead\n   */\n  async function getWeather() {\n    try {\n      console.log(\"testing: \" + useLocation);\n      await Axios.get(useLocation, {\n        timeout: 1900\n      })\n        .then((res) => res.data)\n        .catch((_e) => console.log(\"%cfail: \" + useLocation, \"color: red\"))\n        .then((data) => {\n          console.log(data)\n\n          setIcon(data.weather[0].icon);\n\n          setCity(data.name)\n\n          setCelsious((data.main.temp - 273.15).toFixed(2) + ' C');\n          let _fah = (data.main.temp * 9 / 5) - 459.67;\n          setFahrenheit(_fah.toFixed(2) + ' F');\n\n        })\n      console.log(\"%cpass: \" + useLocation, \"color: green\");\n      return true;\n    } catch (_exception) {\n      console.log(\"%cfail: \" + useLocation, \"color: red\");\n      // console.log(exception);\n      return false;\n    }\n  }\n\n  return (\n    <>\n      <div className=\"weather\">\n        {useIcon ? <img src={`http://openweathermap.org/img/wn/${useIcon}.png`} alt='weather' /> : <></>}\n\n        <h1>{usecity}</h1>\n        <label>{toggle ? celsious : fahrenheit}</label> <br />\n        <button disabled={useLocation ? false : true} onClick={(e) => getWeather(e)}>Get Weather</button> <br />\n        <button disabled={useLocation ? false : true} onClick={(e) => setToggle(!toggle)}>Celsious/Fahrheit</button>\n      </div>\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}